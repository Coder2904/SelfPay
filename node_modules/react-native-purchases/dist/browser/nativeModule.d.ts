import 'react-native-get-random-values';
import { MakePurchaseResult } from '@revenuecat/purchases-typescript-internal';
/**
 * Browser implementation of the native module. This will be used in the browser and Expo Go.
 */
export declare const browserNativeModuleRNPurchases: {
    setupPurchases: (apiKey: string, appUserID: string | null, _purchasesAreCompletedBy: string | null, _userDefaultsSuiteName: string | null, _storeKitVersion: string | null, _useAmazon: boolean, _shouldShowInAppMessagesAutomatically: boolean, _entitlementVerificationMode: string | null, _pendingTransactionsForPrepaidPlansEnabled: boolean, _diagnosticsEnabled: boolean) => Promise<void>;
    setAllowSharingStoreAccount: (_allowSharing: boolean) => Promise<void>;
    setSimulatesAskToBuyInSandbox: (_simulatesAskToBuyInSandbox: boolean) => Promise<void>;
    getOfferings: () => Promise<import("@revenuecat/purchases-typescript-internal").PurchasesOfferings>;
    getCurrentOfferingForPlacement: (placementIdentifier: string) => Promise<import("@revenuecat/purchases-typescript-internal").PurchasesOffering | null>;
    syncAttributesAndOfferingsIfNeeded: () => Promise<import("@revenuecat/purchases-typescript-internal").PurchasesOfferings>;
    getProductInfo: (_productIdentifiers: string[], _type: string) => Promise<void>;
    restorePurchases: () => Promise<import("@revenuecat/purchases-typescript-internal").CustomerInfo>;
    getAppUserID: () => Promise<string>;
    getStorefront: () => Promise<void>;
    setDebugLogsEnabled: (_enabled: boolean) => Promise<void>;
    setLogLevel: (level: string) => Promise<void>;
    setLogHandler: (_handler: (message: string) => void) => Promise<void>;
    getCustomerInfo: () => Promise<import("@revenuecat/purchases-typescript-internal").CustomerInfo>;
    logIn: (appUserID: string) => Promise<{
        customerInfo: import("@revenuecat/purchases-typescript-internal").CustomerInfo;
        created: boolean;
    }>;
    logOut: () => Promise<import("@revenuecat/purchases-typescript-internal").CustomerInfo>;
    syncPurchases: () => Promise<void>;
    syncAmazonPurchase: (_productID: string, _receiptID: string, _amazonUserID: string, _isoCurrencyCode: string | null, _price: number | null) => Promise<void>;
    syncObserverModeAmazonPurchase: (_productID: string, _receiptID: string, _amazonUserID: string, _isoCurrencyCode: string | null, _price: number | null) => Promise<void>;
    recordPurchaseForProductID: (_productID: string) => Promise<void>;
    enableAdServicesAttributionTokenCollection: () => Promise<void>;
    purchaseProduct: (_productIdentifier: string, _googleProductChangeInfo: any, _type: string, _discountTimestamp: string | null, _googleInfo: any, _presentedOfferingContext: any) => Promise<void>;
    purchasePackage: (packageIdentifier: string, presentedOfferingContext: any, _googleProductChangeInfo: any, _discountTimestamp: string | null, _googleInfo: any) => Promise<MakePurchaseResult>;
    purchaseSubscriptionOption: (_productIdentifier: string, _optionIdentifier: string, _upgradeInfo: any, _discountTimestamp: string | null, _googleInfo: any, _presentedOfferingContext: any) => Promise<void>;
    isAnonymous: () => Promise<boolean>;
    makeDeferredPurchase: (_callbackID: number) => Promise<void>;
    checkTrialOrIntroductoryPriceEligibility: (productIDs: string[]) => Promise<{
        [productId: string]: any;
    }>;
    getPromotionalOffer: (_productIdentifier: string, _discount: any) => Promise<void>;
    eligibleWinBackOffersForProductIdentifier: (_productID: string) => Promise<void>;
    purchaseProductWithWinBackOffer: (_productID: string, _winBackOfferID: string) => Promise<void>;
    purchasePackageWithWinBackOffer: (_packageID: string, _winBackOfferID: string) => Promise<void>;
    invalidateCustomerInfoCache: () => Promise<void>;
    presentCodeRedemptionSheet: () => Promise<void>;
    setAttributes: (attributes: {
        [key: string]: string | null;
    }) => Promise<void>;
    setEmail: (email: string) => Promise<void>;
    setPhoneNumber: (phoneNumber: string) => Promise<void>;
    setDisplayName: (displayName: string) => Promise<void>;
    setPushToken: (_pushToken: string) => Promise<void>;
    setProxyURLString: (proxyURLString: string) => Promise<void>;
    collectDeviceIdentifiers: () => Promise<void>;
    setAdjustID: (_adjustID: string) => Promise<void>;
    setAppsflyerID: (_appsflyerID: string) => Promise<void>;
    setFBAnonymousID: (_fbAnonymousID: string) => Promise<void>;
    setMparticleID: (_mparticleID: string) => Promise<void>;
    setCleverTapID: (_cleverTapID: string) => Promise<void>;
    setMixpanelDistinctID: (_mixpanelDistinctID: string) => Promise<void>;
    setFirebaseAppInstanceID: (_firebaseAppInstanceID: string) => Promise<void>;
    setTenjinAnalyticsInstallationID: (_tenjinAnalyticsInstallationID: string) => Promise<void>;
    setKochavaDeviceID: (_kochavaDeviceID: string) => Promise<void>;
    setOnesignalID: (_onesignalID: string) => Promise<void>;
    setAirshipChannelID: (_airshipChannelID: string) => Promise<void>;
    setMediaSource: (_mediaSource: string) => Promise<void>;
    setMediaCampaign: () => Promise<void>;
    setCampaign: (_campaign: string) => Promise<void>;
    setAdGroup: (_adGroup: string) => Promise<void>;
    setAd: (_ad: string) => Promise<void>;
    setKeyword: (_keyword: string) => Promise<void>;
    setCreative: (_creative: string) => Promise<void>;
    canMakePayments: (_features: any[]) => Promise<boolean>;
    beginRefundRequestForActiveEntitlement: () => Promise<void>;
    beginRefundRequestForEntitlementId: (_entitlementIdentifier: string) => Promise<void>;
    beginRefundRequestForProductId: (_productIdentifier: string) => Promise<void>;
    showManageSubscriptions: () => Promise<void>;
    showInAppMessages: (_messageTypes: any[]) => Promise<void>;
    isWebPurchaseRedemptionURL: (_urlString: string) => Promise<void>;
    isConfigured: () => Promise<boolean>;
    redeemWebPurchase: (_urlString: string) => Promise<void>;
    getVirtualCurrencies: () => Promise<void>;
    invalidateVirtualCurrenciesCache: () => Promise<void>;
    getCachedVirtualCurrencies: () => Promise<void>;
};
